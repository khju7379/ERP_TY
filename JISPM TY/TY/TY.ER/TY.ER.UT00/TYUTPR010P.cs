using System;
using System.Data;
using Shoveling2010.SmartClient.SystemUtility.Library;
using Shoveling2010.SmartClient.SystemUtility.Controls;
using TY.Service.Library;
using TY.Service.Library.Controls;
using TY.ER.GB00;
using GrapeCity.ActiveReports;

namespace TY.ER.UT00
{
    /// <summary>
    /// 화물 비중 TABLE2 프로그램입니다.
    /// 
    /// 작성자 : 이상현
    /// 작성일 : 2017.04.06 10:09
    /// 
    /// =====================================================================================
    /// 아래는 본 프로그램에 속해있는 정보에 대한 설명입니다. 
    /// 주의) JISPM의 정보가 변경되었을 경우 틀릴 수 있으니 프로그램 작성 시 참고하시기 바랍니다.
    /// =====================================================================================
    /// 
    /// # 프로시저 정보 ####
    /// 
    ///  # 스프레드 정보 ####
    /// 
    ///  # 알림문자 정보 ####
    ///  TY_M_AC_2422N250 : 자료가 존재하지 않습니다.
    /// 
    ///  # 필드사전 정보 ####
    ///  CLO : 닫기
    ///  PRT : 출력
    /// </summary>
    public partial class TYUTPR010P : TYBase
    {
        #region Description : 폼 로드
        public TYUTPR010P()
        {
            InitializeComponent();
        }

        private void TYUTPR010P_Load(object sender, System.EventArgs e)
        {
        }
        #endregion

        #region Description : 닫기 버튼
        private void BTN61_CLO_Click(object sender, EventArgs e)
        {
            this.Close();
        }
        #endregion

        #region Description : 출력 버튼
        private void BTN61_PRT_Click(object sender, EventArgs e)
        {
            SectionReport rpt = new TYUTPR010R();
            // 세로 출력
            rpt.PageSettings.Orientation = GrapeCity.ActiveReports.Document.Section.PageOrientation.Portrait;

            (new TYERGB001P(rpt, QueryDataSetReport())).ShowDialog();
        }
        #endregion

        #region Description : 데이터셋 변경
        private DataTable QueryDataSetReport()
        {
            string sT1SEQ = string.Empty;

            DataTable retDt = new DataTable();

            retDt.Columns.Add("SEQ", typeof(System.String));
            retDt.Columns.Add("FACT01", typeof(System.String));
            retDt.Columns.Add("FACT02", typeof(System.String));
            retDt.Columns.Add("FACT03", typeof(System.String));
            retDt.Columns.Add("FACT04", typeof(System.String));
            retDt.Columns.Add("FACT05", typeof(System.String));
            retDt.Columns.Add("FACT06", typeof(System.String));
            retDt.Columns.Add("FACT07", typeof(System.String));

            for (int i = 0; i <= 115; i++)
            {
                double[] dFACT01 = new double[116] { 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 10130, 10124, 10117, 10111, 10104, 10093, 10091, 10085, 10078, 10072, 10065, 10059, 10052, 10046, 10039, 10033, 10026, 10020, 10013, 10007, 10000, 09993, 09987, 09980, 09974, 09967, 09961, 09954, 09947, 09941, 09934, 09928, 09921, 09914, 09908, 09901, 09894, 09888, 09881, 09874, 09868, 09861, 09854, 09848, 09841, 09834, 09828, 09821, 09814, 09808, 09801, 09794, 09787, 09781, 09774, 09767, 09761, 09754, 09747, 09740, 09734, 09727, 09720, 09713, 09706, 09700, 09693, 09686, 09679, 09672, 09666, 09659, 09652, 09645, 09638, 09632, 09625, 09618, 09611, 09604, 09597 };
                double[] dFACT02 = new double[116] { 10324, 10318, 10312, 10306, 10300, 10294, 10288, 10283, 10277, 10271, 10265, 10259, 10253, 10247, 10241, 10235, 10230, 10224, 10218, 10212, 10206, 10200, 10194, 10188, 10182, 10177, 10171, 10165, 10159, 10153, 10147, 10141, 10135, 10130, 10124, 10118, 10112, 10106, 10100, 10094, 10088, 10082, 10077, 10071, 10065, 10059, 10053, 10047, 10041, 10035, 10029, 10024, 10018, 10012, 10006, 10000, 09994, 09988, 09982, 09976, 09971, 09965, 09959, 09953, 09947, 09941, 09935, 09929, 09923, 09918, 09912, 09906, 09900, 09894, 09888, 09882, 09876, 09870, 09865, 09859, 09853, 09847, 09841, 09835, 09829, 09823, 09818, 09812, 09806, 09800, 09794, 09788, 09782, 09776, 09770, 09765, 09759, 09753, 09747, 09741, 09735, 09729, 09723, 09717, 09712, 09706, 09700, 09694, 09688, 09682, 09676, 09670, 09664, 09659, 09653, 09647 };
                double[] dFACT03 = new double[116] { 10293, 10287, 10282, 10277, 10272, 10266, 10261, 10250, 10251, 10245, 10240, 10235, 10230, 10224, 10219, 10214, 10208, 10203, 10198, 10193, 10187, 10182, 10177, 10171, 10166, 10161, 10155, 10150, 10145, 10139, 10134, 10129, 10123, 10118, 10113, 10107, 10102, 10097, 10091, 10086, 10081, 10075, 10070, 10065, 10059, 10054, 10048, 10043, 10038, 10032, 10027, 10022, 10016, 10011, 10005, 10000, 09995, 09989, 09984, 09978, 09973, 09968, 09962, 09957, 09951, 09946, 09940, 09935, 09930, 09924, 09919, 09913, 09908, 09902, 09897, 09891, 09886, 09880, 09875, 09869, 09864, 09859, 09853, 09848, 09842, 09837, 09831, 09826, 09820, 09815, 09809, 09804, 09798, 09793, 09787, 09782, 09776, 09771, 09765, 09759, 09754, 09748, 09743, 09737, 09732, 09726, 09721, 09715, 09710, 09704, 09698, 09693, 09687, 09682, 09676, 09671 };
                double[] dFACT04 = new double[116] { 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 10242, 10237, 10231, 10226, 10221, 10215, 10210, 10204, 10199, 10194, 10188, 10183, 10178, 10172, 10167, 10162, 10156, 10151, 10145, 10140, 10135, 10129, 10124, 10119, 10113, 10108, 10102, 10097, 10092, 10086, 10081, 10075, 10070, 10065, 10059, 10054, 10049, 10043, 10038, 10032, 10027, 10022, 10016, 10011, 10005, 10000, 09995, 09989, 09984, 09978, 09973, 09968, 09962, 09957, 09951, 09946, 09941, 09935, 09930, 09924, 09919, 09914, 09908, 09903, 09897, 09892, 09886, 09881, 09876, 09870, 09865, 09859, 09854, 09849, 09843, 09838, 09832, 09827, 09821, 09816, 09811, 09805, 09800, 09794, 09789, 09783, 09778, 09773, 09767, 09762, 09756, 09751, 09745, 09740, 09734, 09729, 09724, 09718, 09713, 09707, 09702, 09696, 09691, 09685, 09680, 09675 };
                double[] dFACT05 = new double[116] { 10288, 10283, 10278, 10273, 10267, 10262, 10257, 10252, 10246, 10241, 10236, 10231, 10225, 10220, 10215, 10210, 10204, 10199, 10194, 10189, 10184, 10178, 10173, 10168, 10163, 10157, 10152, 10147, 10142, 10136, 10131, 10126, 10121, 10115, 10110, 10105, 10100, 10094, 10089, 10084, 10079, 10074, 10068, 10063, 10058, 10053, 10047, 10042, 10037, 10032, 10026, 10021, 10016, 10011, 10005, 10000, 09995, 09989, 09984, 09979, 09974, 09968, 09963, 09958, 09953, 09947, 09942, 09937, 09932, 09926, 09921, 09916, 09911, 09905, 09900, 09895, 09889, 09884, 09879, 09874, 09868, 09863, 09858, 09852, 09847, 09842, 09837, 09831, 09826, 09821, 09815, 09810, 09805, 09800, 09794, 09789, 09784, 09778, 09773, 09768, 09762, 09757, 09752, 09746, 09741, 09736, 09731, 09725, 09720, 09715, 09709, 09704, 09699, 09693, 09688, 09683 };
                double[] dFACT06 = new double[116] { 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 10027, 10022, 10016, 10011, 10005, 10000, 09994, 09989, 09983, 09978, 09972, 09967, 09961, 09956, 09950, 09945, 09939, 09934, 09928, 09923, 09917, 09912, 09906, 09901, 09895, 09890, 09884, 09878, 09873, 09867, 09862, 09856, 09851, 09845, 09840, 09834, 09828, 09823, 09817, 09812, 09806, 09801, 09795, 09789, 09784, 09778, 09773, 09767, 09761, 09756, 09750, 09745, 09739, 09733, 09728, 09722, 09716, 09711, 09705, 09700, 09694, 09688, 09683, 09677, 09671, 09666 };
                double[] dFACT07 = new double[116] { 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 10091, 10086, 10080, 10075, 10069, 10063, 10058, 10052, 10046, 10041, 10035, 10029, 10023, 10018, 10012, 10006, 10000, 09994, 09988, 09982, 09976, 09970, 09964, 09958, 09952, 09946, 09940, 09934, 09927, 09921, 09915, 09909, 09903, 09896, 09890, 09884, 09877, 09871, 09865, 09858, 09852, 09845, 09839, 09833, 09826, 09820, 09813, 09806, 09800, 09793, 09787, 09780, 09774, 09767, 09760, 09854, 09747, 09740, 09733, 09727, 09720, 09713, 09706, 09700, 09693, 09686, 09679, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000, 00000 };

                DataRow row = retDt.NewRow();

                row["SEQ"] = i + 5;
                if (dFACT01[i] != 0)
                {
                    row["FACT01"] = dFACT01[i] / 10000;
                }
                else
                {
                    row["FACT01"] = "";
                }
                if (dFACT02[i] != 0)
                {
                    row["FACT02"] = dFACT02[i] / 10000;
                }
                else
                {
                    row["FACT02"] = "";
                }
                if (dFACT03[i] != 0)
                {
                    row["FACT03"] = dFACT03[i] / 10000;
                }
                else
                {
                    row["FACT03"] = "";
                }
                if (dFACT04[i] != 0)
                {
                    row["FACT04"] = dFACT04[i] / 10000;
                }
                else
                {
                    row["FACT04"] = "";
                }
                if (dFACT05[i] != 0)
                {
                    row["FACT05"] = dFACT05[i] / 10000;
                }
                else
                {
                    row["FACT05"] = "";
                }
                if (dFACT06[i] != 0)
                {
                    row["FACT06"] = dFACT06[i] / 10000;
                }
                else
                {
                    row["FACT06"] = "";
                }
                if (dFACT07[i] != 0)
                {
                    row["FACT07"] = dFACT07[i] / 10000;
                }
                else
                {
                    row["FACT07"] = "";
                }

                retDt.Rows.Add(row);
            }
            return retDt;
        }
        #endregion
    }
}
